<?php
namespace Themes\Golf\Golf\Admin;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\AdminController;
use Modules\Core\Events\CreatedServicesEvent;
use Modules\Core\Events\UpdatedServiceEvent;
use Modules\Core\Models\Attributes;
use Modules\Location\Models\Location;
use Modules\Location\Models\LocationCategory;
use Themes\Golf\Golf\Models\Golf;
use Themes\Golf\Golf\Models\GolfTerm;
use Themes\Golf\Golf\Models\GolfTranslation;

class GolfController extends AdminController
{
    protected $golf;
    protected $golf_translation;
    protected $golf_term;
    protected $attributes;
    protected $location;
    private $locationCategoryClass;

    public function __construct(Golf $golf, GolfTranslation $golf_translation, GolfTerm $golf_term, Attributes $attributes, Location $location,LocationCategory $locationCategoryClass)
    {
        $this->setActiveMenu(route('golf.admin.index'));
        $this->golf = $golf;
        $this->golf_translation = $golf_translation;
        $this->golf_term = $golf_term;
        $this->attributes = $attributes;
        $this->location = $location;
        $this->locationCategoryClass = $locationCategoryClass;
    }

    public function callAction($method, $parameters)
    {
        if (!Golf::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $this->checkPermission('golf_view');
        $query = $this->golf::query();
        $query->orderBy('id', 'desc');
        if (!empty($s = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $s . '%');
            $query->orderBy('title', 'asc');
        }
        if (!empty($is_featured = $request->input('is_featured'))) {
            $query->where('is_featured', 1);
        }
        if (!empty($location_id = $request->query('location_id'))) {
            $query->where('location_id', $location_id);
        }
        if ($this->hasPermission('golf_manage_others')) {
            if (!empty($author = $request->input('vendor_id'))) {
                $query->where('author_id', $author);
            }
        } else {
            $query->where('author_id', Auth::id());
        }
        $data = [
            'rows'                => $query->with(['author'])->paginate(20),
            'golf_manage_others' => $this->hasPermission('golf_manage_others'),
            'breadcrumbs'         => [
                [
                    'name' => __('Golfs'),
                    'url'  => route('golf.admin.index')
                ],
                [
                    'name'  => __('All'),
                    'class' => 'active'
                ],
            ],
            'page_title'          => __("Golf Management")
        ];
        return view('Golf::admin.index', $data);
    }

    public function recovery(Request $request)
    {
        $this->checkPermission('golf_view');
        $query = $this->golf::onlyTrashed();
        $query->orderBy('id', 'desc');
        if (!empty($s = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $s . '%');
            $query->orderBy('title', 'asc');
        }
        if ($this->hasPermission('golf_manage_others')) {
            if (!empty($author = $request->input('vendor_id'))) {
                $query->where('author_id', $author);
            }
        } else {
            $query->where('author_id', Auth::id());
        }
        $data = [
            'rows'                => $query->with(['author'])->paginate(20),
            'golf_manage_others' => $this->hasPermission('golf_manage_others'),
            'recovery'            => 1,
            'breadcrumbs'         => [
                [
                    'name' => __('Golfs'),
                    'url'  => route('golf.admin.index')
                ],
                [
                    'name'  => __('Recovery'),
                    'class' => 'active'
                ],
            ],
            'page_title'          => __("Recovery Golf Management")
        ];
        return view('Golf::admin.index', $data);
    }

    public function create(Request $request)
    {
        $this->checkPermission('golf_create');
        $row = new $this->golf();
        $row->fill([
            'status' => 'publish'
        ]);
        $data = [
            'row'               => $row,
            'attributes'        => $this->attributes::where('service', 'golf')->get(),
            'location'    => $this->location::where('status', 'publish')->get()->toTree(),
            'location_category' => $this->locationCategoryClass::where('status', 'publish')->get(),
            'translation'       => new $this->golf_translation(),
            'breadcrumbs'       => [
                [
                    'name' => __('Golfs'),
                    'url'  => route('golf.admin.index')
                ],
                [
                    'name'  => __('Add Golf'),
                    'class' => 'active'
                ],
            ],
            'page_title'        => __("Add new Golf")
        ];
        return view('Golf::admin.detail', $data);
    }

    public function edit(Request $request, $id)
    {
        $this->checkPermission('golf_update');
        $row = $this->golf::find($id);
        if (empty($row)) {
            return redirect(route('golf.admin.index'));
        }
        $translation = $row->translate($request->query('lang',get_main_lang()));
        if (!$this->hasPermission('golf_manage_others')) {
            if ($row->author_id != Auth::id()) {
                return redirect(route('golf.admin.index'));
            }
        }
        $data = [
            'row'               => $row,
            'translation'       => $translation,
            "selected_terms"    => $row->terms->pluck('term_id'),
            'attributes'        => $this->attributes::where('service', 'golf')->get(),
            'location'    => $this->location::where('status', 'publish')->get()->toTree(),
            'location_category' => $this->locationCategoryClass::where('status', 'publish')->get(),
            'enable_multi_lang' => true,
            'breadcrumbs'       => [
                [
                    'name' => __('Golfs'),
                    'url'  => route('golf.admin.index')
                ],
                [
                    'name'  => __('Edit Golf'),
                    'class' => 'active'
                ],
            ],
            'page_title'        => __("Edit: :name", ['name' => $row->title])
        ];
        return view('Golf::admin.detail', $data);
    }

    public function store(Request $request, $id)
    {

        if ($id > 0) {
            $this->checkPermission('golf_update');
            $row = $this->golf::find($id);
            if (empty($row)) {
                return redirect(route('golf.admin.index'));
            }
            if ($row->author_id != Auth::id() and !$this->hasPermission('golf_manage_others')) {
                return redirect(route('golf.admin.index'));
            }
        } else {
            $this->checkPermission('golf_create');
            $row = new $this->golf();
            $row->status = "publish";
        }
        $dataKeys = [
            'title',
            'content',
            'price',
            'is_instant',
            'status',
            'video',
            'faqs',
            'image_id',
            'banner_image_id',
            'gallery',
            'location_id',
            'address',
            'map_lat',
            'map_lng',
            'map_zoom',
            'duration',
            'start_time',
            'price',
            'sale_price',
            'ticket_types',
            'enable_extra_price',
            'extra_price',
            'is_featured',
            'default_state',
            'enable_service_fee',
            'service_fee',
            'course_details',

            'cart_price',
            'cart_sharing_price',
        ];
        if ($this->hasPermission('golf_manage_others')) {
            $dataKeys[] = 'author_id';
        }
        $row->fillByAttr($dataKeys, $request->input());
        if ($request->input('slug')) {
            $row->slug = $request->input('slug');
        }
        $res = $row->saveOriginOrTranslation($request->input('lang'), true);
        if ($res) {
            if (!$request->input('lang') or is_default_lang($request->input('lang'))) {
                $this->saveTerms($row, $request);
            }
            if ($id > 0) {
                event(new UpdatedServiceEvent($row));
                return back()->with('success', __('Golf updated'));
            } else {
                event(new CreatedServicesEvent($row));
                return redirect(route('golf.admin.edit', $row->id))->with('success', __('Golf created'));
            }
        }
    }

    public function saveTerms($row, $request)
    {
        $this->checkPermission('golf_manage_attributes');
        if (empty($request->input('terms'))) {
            $this->golf_term::where('target_id', $row->id)->delete();
        } else {
            $term_ids = $request->input('terms');
            foreach ($term_ids as $term_id) {
                $this->golf_term::firstOrCreate([
                    'term_id'   => $term_id,
                    'target_id' => $row->id
                ]);
            }
            $this->golf_term::where('target_id', $row->id)->whereNotIn('term_id', $term_ids)->delete();
        }
    }

    public function bulkEdit(Request $request)
    {

        $ids = $request->input('ids');
        $action = $request->input('action');
        if (empty($ids) or !is_array($ids)) {
            return redirect()->back()->with('error', __('No items selected!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }
        switch ($action) {
            case "delete":
                foreach ($ids as $id) {
                    $query = $this->golf::where("id", $id);
                    if (!$this->hasPermission('golf_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('golf_delete');
                    }
                    $row = $query->first();
                    if (!empty($row)) {
                        $row->delete();
                        event(new UpdatedServiceEvent($row));
                    }
                }
                return redirect()->back()->with('success', __('Deleted success!'));
                break;
            case "permanently_delete":
                foreach ($ids as $id) {
                    $query = $this->golf::where("id", $id);
                    if (!$this->hasPermission('golf_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('golf_delete');
                    }
                    $row = $query->withTrashed()->first();
                    if ($row) {
                        $row->forceDelete();
                    }
                }
                return redirect()->back()->with('success', __('Permanently delete success!'));
                break;
            case "recovery":
                foreach ($ids as $id) {
                    $query = $this->golf::withTrashed()->where("id", $id);
                    if (!$this->hasPermission('golf_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('golf_delete');
                    }
                    $row = $query->first();
                    if (!empty($row)) {
                        $row->restore();
                        event(new UpdatedServiceEvent($row));
                    }
                }
                return redirect()->back()->with('success', __('Recovery success!'));
                break;
            case "clone":
                $this->checkPermission('golf_create');
                foreach ($ids as $id) {
                    (new $this->golf())->saveCloneByID($id);
                }
                return redirect()->back()->with('success', __('Clone success!'));
                break;
            default:
                // Change status
                foreach ($ids as $id) {
                    $query = $this->golf::where("id", $id);
                    if (!$this->hasPermission('golf_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('golf_update');
                    }
                    $row = $query->first();
                    $row->status = $action;
                    $row->save();
                    event(new UpdatedServiceEvent($row));
                }
                return redirect()->back()->with('success', __('Update success!'));
                break;
        }
    }

    public function getForSelect2(Request $request)
    {
        $pre_selected = $request->query('pre_selected');
        $selected = $request->query('selected');
        if ($pre_selected && $selected) {
            if (is_array($selected)) {
                $items = $this->golf::select('id', 'title as text')->whereIn('id', $selected)->take(50)->get();
            } else {
                $items = $this->golf::find($selected);
            }
            return [
                'results'=>$items
            ];
        }
        $q = $request->query('q');
        $query = $this->golf::select('id', 'title as text')->where("status", "publish");
        if ($q) {
            $query->where('title', 'like', '%' . $q . '%');
        }
        $res = $query->orderBy('id', 'desc')->limit(20)->get();
        return $this->sendSuccess([
            'results' => $res
        ]);
    }
}
